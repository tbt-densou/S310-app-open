package com.example.frontp.screens.views

import org.json.JSONObject
import java.net.HttpURLConnection
import java.net.URL
import android.util.Log
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.NonCancellable.isActive
import kotlinx.coroutines.delay
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.CoroutineScope
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.Timer
import java.util.TimerTask
import org.json.JSONArray
import com.example.frontp.dataclass.FlightData



object GoogleSheetsHelper {
    private const val SCRIPT_URL = "https://script.google.com/macros/s/AKfycbxtyMzDHha4voVkNxIFCDssaFpGR5pK9O7GsWltk2QNoxnokQey0fyGoNucvVDWkRc/exec"

    fun writeToSheet(rowData: List<Any?>) {
        Thread {
            try {
                val url = URL(SCRIPT_URL)
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.doOutput = true
                connection.setRequestProperty("Content-Type", "application/json")

                val jsonPayload = JSONObject()
                jsonPayload.put("value", rowData.joinToString(","))

                val outputStream = connection.outputStream
                outputStream.write(jsonPayload.toString().toByteArray())
                outputStream.flush()
                outputStream.close()

                val responseCode = connection.responseCode
                Log.d("GoogleSheetsHelper", "Response: $responseCode")
            } catch (e: Exception) {
                Log.e("GoogleSheetsHelper", "Error: ${e.message}", e)
                e.printStackTrace()
            }
        }.start()
    }
}

object GoogleSheetsHelper2 {
    private const val SCRIPT_URL = "https://script.google.com/macros/s/AKfycbyTyrUFpcikkP-F2Cde5Sab634p-aoDVfQ_lpILvkzjdO3Yab532Ool70IRwJO2s50/exec"
    private val dataBuffer = mutableListOf<List<Any?>>()

    init {
        startPeriodicSend()
    }

    // ‚úÖ Âëº„Å≥Âá∫„ÅóÊôÇÁÇπ„Åß„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Çí„Å§„Åë„Çã
    fun addDataRow(data: List<Any?>) {
        val timestamp = SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS", Locale.getDefault()).format(Date())
        val rowWithTimestamp = listOf(timestamp) + data
        synchronized(dataBuffer) {
            dataBuffer.add(rowWithTimestamp)
        }
    }

    private fun startPeriodicSend() {
        Timer().schedule(object : TimerTask() {
            override fun run() {
                val toSend: List<List<Any?>>
                synchronized(dataBuffer) {
                    if (dataBuffer.isEmpty()) return
                    toSend = dataBuffer.toList()
                    dataBuffer.clear()
                }
                sendData(toSend)
            }
        }, 1000, 1000)
    }

    private fun sendData(rows: List<List<Any?>>) {
        Thread {
            try {
                val jsonPayload = JSONObject()
                jsonPayload.put("rows", JSONArray(rows.map { JSONArray(it) }))

                val url = URL(SCRIPT_URL)
                val connection = url.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.doOutput = true
                connection.setRequestProperty("Content-Type", "application/json")

                connection.outputStream.use { it.write(jsonPayload.toString().toByteArray()) }

                val responseCode = connection.responseCode
                Log.d("GoogleSheetsHelper", "Response: $responseCode")
                Log.d("GoogleSheetsHelper", "$rows")
            } catch (e: Exception) {
                Log.e("GoogleSheetsHelper", "Error: ${e.message}", e)
            }
        }.start()
    }
}


object FirebaseHelper {
    private val database: FirebaseDatabase = FirebaseDatabase.getInstance()
    private val dataRef: DatabaseReference = database.getReference("sensorData")

    fun writeToFirebase(rowData: List<Any?>) {
        val currentUser = FirebaseAuth.getInstance().currentUser
        if (currentUser != null) {
            if (rowData.any { it != null }) {
                val dataMap = mutableMapOf<String, Any?>()

                rowData.getOrNull(1)?.let { dataMap["speed"] = it }
                rowData.getOrNull(2)?.let { dataMap["height"] = it }
                rowData.getOrNull(3)?.let { dataMap["roll"] = it }
                rowData.getOrNull(4)?.let { dataMap["pitch"] = it }
                rowData.getOrNull(5)?.let { dataMap["yaw"] = it }
                rowData.getOrNull(6)?.let { dataMap["eAngle"] = it }
                rowData.getOrNull(7)?.let { dataMap["rAngle"] = it }
                rowData.getOrNull(8)?.let { dataMap["latitude"] = it }
                rowData.getOrNull(9)?.let { dataMap["longitude"] = it }

                dataMap["timestamp"] = System.currentTimeMillis()

                // „Éá„Éº„ÇøÊï∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶10‰ª∂Ë∂Ö„Åà„Å¶„ÅÑ„Åü„ÇâÂè§„ÅÑÈ†Ü„Å´ÂâäÈô§
                dataRef.orderByChild("timestamp").addListenerForSingleValueEvent(object : ValueEventListener {
                    override fun onDataChange(snapshot: DataSnapshot) {
                        val children = snapshot.children.toList()
                        if (children.size >= 20) {
                            val numToDelete = children.size - 19 // ÊúÄÊñ∞„ÅÆ9‰ª∂„ÇíÊÆã„Åô
                            children.take(numToDelete).forEach { child ->
                                child.ref.removeValue()
                            }
                        }

                        // „Éá„Éº„ÇøËøΩÂä†
                        dataRef.push().setValue(dataMap)
                            .addOnSuccessListener {
                                Log.d("FirebaseHelper", "üî• Firebase „Å´„Éá„Éº„ÇøÈÄÅ‰ø°ÊàêÂäüÔºÅ")
                            }
                            .addOnFailureListener { e ->
                                Log.e("FirebaseHelper", "‚ö†Ô∏è Firebase ÈÄÅ‰ø°„Ç®„É©„Éº: ${e.message}")
                            }
                    }

                    override fun onCancelled(error: DatabaseError) {
                        Log.e("FirebaseHelper", "‚ö†Ô∏è „Éá„Éº„ÇøÂèñÂæó„Ç≠„É£„É≥„Çª„É´: ${error.message}")
                    }
                })
            } else {
                Log.e("FirebaseHelper", "‚ö†Ô∏è ÊúâÂäπ„Å™„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰øùÂ≠ò„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ")
            }
        } else {
            Log.e("FirebaseHelper", "‚ö†Ô∏è „É¶„Éº„Ç∂„Éº„ÅåË™çË®º„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ")
        }
    }
}


object FirebaseSelect {
    private val database: FirebaseDatabase = FirebaseDatabase.getInstance()

    fun writeToFirebase(rowData: List<Any?>, selectedValue: String?, currentSelectedItem:String?) {
        val currentUser = FirebaseAuth.getInstance().currentUser
        if (currentUser != null) {
            if (rowData.any { it != null }) {
                val dataMap = mutableMapOf<String, Any?>()

                rowData.getOrNull(1)?.let { dataMap["speed"] = it }
                rowData.getOrNull(2)?.let { dataMap["height"] = it }
                rowData.getOrNull(3)?.let { dataMap["roll"] = it }
                rowData.getOrNull(4)?.let { dataMap["pitch"] = it }
                rowData.getOrNull(5)?.let { dataMap["yaw"] = it }
                rowData.getOrNull(6)?.let { dataMap["eAngle"] = it }
                rowData.getOrNull(7)?.let { dataMap["rAngle"] = it }
                rowData.getOrNull(8)?.let { dataMap["latitude"] = it }
                rowData.getOrNull(9)?.let { dataMap["longitude"] = it }

                dataMap["timestamp"] = System.currentTimeMillis()

                // „Åì„ÅìÔºÅselectedValue„Åånull„ÇÑÁ©∫„Åò„ÇÉ„Å™„Åë„Çå„Å∞‰øùÂ≠ò
                selectedValue?.takeIf { it.isNotEmpty() }?.let { key ->
                    val validKeys = listOf(
                        "„Éá„Éê„ÉÉ„ÇØ",
                        "ÂÖ®‰ΩìÊé•Âêà",
                        "1stËµ∞Ë°å",
                        "2ndËµ∞Ë°å",
                        "1stTF",
                        "2ndTF",
                        "3rdTF",
                        "4thTF",
                        "5thTF",
                        "6thTF",
                        "7thTF",
                        "ÊúÄÁµÇTF"
                    )

                    val safeKey = if (key in validKeys) key else "other"

                    currentSelectedItem?.takeIf { it.isNotEmpty() }?.let { key ->
                        val flightKeys = listOf(
                            "1Êú¨ÁõÆ",
                            "2Êú¨ÁõÆ",
                            "3Êú¨ÁõÆ",
                            "4Êú¨ÁõÆ",
                            "5Êú¨ÁõÆ",
                            "6Êú¨ÁõÆ",
                            "7Êú¨ÁõÆ",
                            "8Êú¨ÁõÆ",
                            "9Êú¨ÁõÆ",
                            "10Êú¨ÁõÆ",
                            "11Êú¨ÁõÆ",
                            "12Êú¨ÁõÆ",
                            "13Êú¨ÁõÆ",
                            "14Êú¨ÁõÆ",
                            "15Êú¨ÁõÆ"
                        )

                        val fliKey = if (key in flightKeys) key else "other"

                        val sortedRef = database.getReference(safeKey).child(fliKey)
                        sortedRef.push().setValue(dataMap)
                            .addOnSuccessListener {
                                Log.d("FirebaseHelper", "‚úÖ sortedData/$safeKey „Å´‰øùÂ≠òÊàêÂäüÔºÅ")
                            }
                            .addOnFailureListener { e ->
                                Log.e(
                                    "FirebaseHelper",
                                    "‚ö†Ô∏è sortedData/$safeKey ‰øùÂ≠òÂ§±Êïó: ${e.message}"
                                )
                            }
                    }
                }

            } else {
                Log.e("FirebaseHelper", "‚ö†Ô∏è ÊúâÂäπ„Å™„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰øùÂ≠ò„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ")
            }
        } else {
            Log.e("FirebaseHelper", "‚ö†Ô∏è „É¶„Éº„Ç∂„Éº„ÅåË™çË®º„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ")
        }
    }
}

object FirebaseFlag {
    private var flagListener: ValueEventListener? = null
    private var lastFlagUpdateTime = System.currentTimeMillis()
    private var lastValidValue: Int? = null
    private var nullCount = 0

    fun startMonitoringFlag(onValueChanged: (Int) -> Unit) {
        val flagRef = FirebaseDatabase.getInstance().getReference("Flag")

        flagListener?.let { flagRef.removeEventListener(it) }

        flagListener = object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val latest = snapshot.children.lastOrNull()
                val value = latest?.getValue(Int::class.java)

                Log.d("FirebaseFlag", "üö© Flag„ÅÆÁèæÂú®„ÅÆÂÄ§: $value")

                lastFlagUpdateTime = System.currentTimeMillis()

                if (value != null) {
                    lastValidValue = value
                    nullCount = 0
                    onValueChanged(value)
                } else {
                    nullCount++
                    if (nullCount >= 3) {
                        Log.d("FirebaseFlag", "‚ö†Ô∏è ÈÄ£Á∂ö3Âõûnull„Å†„Å£„Åü„ÅÆ„Åß 0 „Å®„Åø„Å™„Åó„Åæ„Åô")
                        lastValidValue = 0
                        nullCount = 0
                        onValueChanged(0)
                    } else {
                        Log.d("FirebaseFlag", "üì≠ „Éï„É©„Ç∞„Åånull„Åß„ÅôÔºàÁÑ°Ë¶ñ, „Ç´„Ç¶„É≥„Éà: $nullCountÔºâ")
                        lastValidValue?.let { onValueChanged(it) }  // Áõ¥Ââç„ÅÆÂÄ§„ÇíÂÜçÈÄÅ
                    }
                }
            }

            override fun onCancelled(error: DatabaseError) {
                Log.e("FirebaseFlag", "‚ö†Ô∏è FlagÁõ£Ë¶ñ„Ç®„É©„Éº: ${error.message}")
            }
        }

        flagRef.addValueEventListener(flagListener!!)
    }

    fun startFlagTimeoutMonitor() {
        CoroutineScope(Dispatchers.IO).launch {
            while (isActive) {
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastFlagUpdateTime > 3000) {
                    Log.w("FirebaseFlag", "üö® 3Áßí‰ª•‰∏äÊõ¥Êñ∞„Å™„Åó„ÄÇ0„ÇíÊõ∏„ÅçËæº„Åø„Åæ„Åô")
                    writeFlagValue(0)
                    lastFlagUpdateTime = currentTime // „Åì„Çå„ÅßÁÑ°ÈôêÊõ∏„ÅçËæº„ÅøÈò≤Ê≠¢
                }
                delay(1000)
            }
        }
    }

    fun writeFlagValue(value: Int) {
        val flagRef = FirebaseDatabase.getInstance().getReference("Flag")

        flagRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                // Êó¢Â≠ò„Éá„Éº„Çø„ÇíÂâäÈô§
                snapshot.children.forEach { it.ref.removeValue() }

                // 1„Å§„Å†„ÅëÊñ∞„Åó„ÅÑÂÄ§„ÇíÊõ∏„ÅçËæº„ÇÄ
                flagRef.push().setValue(value)
                    .addOnSuccessListener {
                        Log.d("FirebaseFlag", "‚úÖ Flag„Å´$value „ÇíÊõ∏„ÅçËæº„Åø„Åæ„Åó„Åü")
                    }
                    .addOnFailureListener { e ->
                        Log.e("FirebaseFlag", "‚ö†Ô∏è Êõ∏„ÅçËæº„Åø„Ç®„É©„Éº: ${e.message}")
                    }
            }

            override fun onCancelled(error: DatabaseError) {
                Log.e("FirebaseFlag", "‚ö†Ô∏è Firebase„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº: ${error.message}")
            }
        })
    }

}

fun observeFlightData(
    onResult: (List<FlightData>) -> Unit,
    onError: (String) -> Unit = {}
): ValueEventListener {
    val database = FirebaseDatabase.getInstance()
    val flightRef = database.getReference("Flight")

    val listener = object : ValueEventListener {
        override fun onDataChange(snapshot: DataSnapshot) {
            val flightList = mutableListOf<FlightData>()
            for (child in snapshot.children) {
                val data = child.getValue(FlightData::class.java)
                data?.let { flightList.add(it) }
            }
            onResult(flightList)
        }

        override fun onCancelled(error: DatabaseError) {
            onError(error.message)
        }
    }

    flightRef.addValueEventListener(listener)
    return listener  // Âæå„Åß removeListener „Åß„Åç„Çã„Çà„ÅÜ„Å´Ëøî„Åó„Å¶„Åä„Åè
}


